import requests
import json
import pymongo
from pymongo import MongoClient
import yaml
import logging
from typing import List, Dict, Any, Optional
import time
from datetime import datetime

# Logging konfig√ºrasyonu
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class SigmaHQComparator:
    def __init__(self, mongo_connection: str, ollama_url="http://localhost:11434", model_name="llama3.1"):
        """
        SigmaHQ kurallarƒ± ile tek kural kar≈üƒ±la≈ütƒ±rƒ±cƒ±sƒ±
        
        Args:
            mongo_connection (str): MongoDB baƒülantƒ± string'i
            ollama_url (str): Ollama API URL'i
            model_name (str): Kullanƒ±lacak AI model
        """
        self.mongo_connection = mongo_connection
        self.ollama_url = ollama_url
        self.model_name = model_name
        self.api_endpoint = f"{ollama_url}/api/generate"
        self.client = None
        self.collection = None
        
    def connect_mongodb(self, database_name="sigmaDB", collection_name="rules"):
        """MongoDB'ye baƒülan"""
        try:
            self.client = MongoClient(self.mongo_connection)
            self.client.admin.command('ping')
            self.collection = self.client[database_name][collection_name]
            logger.info("‚úÖ MongoDB baƒülantƒ±sƒ± ba≈üarƒ±lƒ±")
            return True
        except Exception as e:
            logger.error(f"‚ùå MongoDB baƒülantƒ± hatasƒ±: {e}")
            return False
    
    def test_ollama_connection(self):
        """Ollama baƒülantƒ±sƒ±nƒ± test et"""
        try:
            response = requests.get(f"{self.ollama_url}/api/tags", timeout=10)
            if response.status_code == 200:
                models = response.json().get('models', [])
                available_models = [model['name'] for model in models]
                logger.info(f"‚úÖ Ollama baƒülantƒ±sƒ± ba≈üarƒ±lƒ±. Mevcut modeller: {available_models}")
                
                if self.model_name not in available_models:
                    logger.warning(f"‚ö†Ô∏è Model '{self.model_name}' bulunamadƒ±.")
                    if available_models:
                        self.model_name = available_models[0]
                        logger.info(f"üìã '{self.model_name}' modeli kullanƒ±lacak")
                return True
            return False
        except Exception as e:
            logger.error(f"‚ùå Ollama baƒülantƒ± hatasƒ±: {e}")
            return False

    def load_sigma_rule_from_file(self, file_path: str) -> Dict[str, Any]:
        """YAML dosyasƒ±ndan Sigma kuralƒ±nƒ± y√ºkle"""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                rule = yaml.safe_load(f)
            logger.info(f"‚úÖ Sigma kuralƒ± y√ºklendi: {rule.get('title', 'No title')}")
            return rule
        except Exception as e:
            logger.error(f"‚ùå YAML dosyasƒ± y√ºklenemedi: {e}")
            return {}

    def load_sigma_rule_from_text(self, yaml_text: str) -> Dict[str, Any]:
        """YAML string'den Sigma kuralƒ±nƒ± y√ºkle"""
        try:
            rule = yaml.safe_load(yaml_text)
            logger.info(f"‚úÖ Sigma kuralƒ± parse edildi: {rule.get('title', 'No title')}")
            return rule
        except Exception as e:
            logger.error(f"‚ùå YAML text parse edilemedi: {e}")
            return {}

    def format_detection_for_ai(self, rule: Dict[str, Any]) -> str:
        """Sadece detection mantƒ±ƒüƒ±nƒ± AI i√ßin hazƒ±rla (basit ve odaklƒ±)"""
        
        if 'detection' not in rule:
            return "DETECTION: None"
        
        detection = rule['detection']
        detection_yaml = yaml.dump(detection, default_flow_style=False, indent=2)
        
        # Sadece detection + kƒ±sa a√ßƒ±klama
        title = rule.get('title', 'Unknown Rule')
        
        return f"RULE: {title}\nDETECTION:\n{detection_yaml}"

    def calculate_detection_similarity(self, input_rule: Dict[str, Any], sigmahq_rule: Dict[str, Any]) -> float:
        """ƒ∞ki Sigma kuralƒ±nƒ±n detection benzerliƒüini AI ile hesapla (sadece detection odaklƒ±)"""
        
        input_detection = self.format_detection_for_ai(input_rule)
        sigmahq_detection = self.format_detection_for_ai(sigmahq_rule)
        
        prompt = f"""
ƒ∞ki Sigma kuralƒ±nƒ±n DETECTION mantƒ±ƒüƒ±nƒ± kar≈üƒ±la≈ütƒ±r ve 0.0-1.0 arasƒ±nda benzerlik skoru ver.

SADECE DETECTION mantƒ±ƒüƒ±na odaklan:
- Field isimleri (Image, CommandLine, EventID, vb.)
- Field deƒüerleri (powershell.exe, cmd.exe, vb.) 
- Condition mantƒ±ƒüƒ± (selection, filter, vb.)
- Detection yapƒ±sƒ± (selection1, selection2, vb.)

Benzerlik seviyeleri:
1.0 = Neredeyse aynƒ± detection mantƒ±ƒüƒ±
0.8-0.9 = Aynƒ± field'larƒ± kullanƒ±yor, benzer deƒüerler
0.6-0.7 = Benzer field'lar, farklƒ± deƒüerler
0.4-0.5 = Farklƒ± field'lar ama benzer ama√ß
0.2-0.3 = Az ortak √∂zellik
0.0-0.1 = Tamamen farklƒ± detection

KULLANICI DETECTION:
{input_detection}

SIGMAHQ DETECTION:
{sigmahq_detection}

Sadece sayƒ±sal skor ver (√∂rnek: 0.75):
"""

        try:
            response = requests.post(
                self.api_endpoint,
                json={
                    "model": self.model_name,
                    "prompt": prompt,
                    "stream": False,
                    "options": {
                        "temperature": 0.1,  # Tutarlƒ± skorlar i√ßin d√º≈ü√ºk
                        "max_tokens": 10
                    }
                },
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                score_text = result.get('response', '0.0').strip()
                
                # Sayƒ±sal skoru √ßƒ±kar
                import re
                score_match = re.search(r'(\d+\.?\d*)', score_text)
                if score_match:
                    score = float(score_match.group(1))
                    return min(1.0, max(0.0, score))
                    
            return 0.0
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è AI benzerlik hesaplama hatasƒ±: {e}")
            return 0.0

    def generate_detection_summary(self, input_rule: Dict[str, Any], similar_rule: Dict[str, Any], score: float) -> str:
        """ƒ∞ki kuralƒ±n detection benzerliƒüi hakkƒ±nda AI √∂zeti olu≈ütur"""
        
        input_detection = self.format_detection_for_ai(input_rule)
        similar_detection = self.format_detection_for_ai(similar_rule)
        
        prompt = f"""
ƒ∞ki Sigma kuralƒ±nƒ±n DETECTION mantƒ±ƒüƒ±nƒ± kar≈üƒ±la≈ütƒ±r. Neden benzer olduklarƒ±nƒ± 1-2 c√ºmleyle a√ßƒ±kla.

Detection benzerlik skoru: {score:.2f}

KULLANICI DETECTION:
{input_detection}

BENZER KURAL DETECTION:
{similar_detection}

Hangi field'lar ortak, hangi deƒüerler benzer? Kƒ±sa a√ßƒ±kla:
"""

        try:
            response = requests.post(
                self.api_endpoint,
                json={
                    "model": self.model_name,
                    "prompt": prompt,
                    "stream": False,
                    "options": {
                        "temperature": 0.3,
                        "max_tokens": 150
                    }
                },
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                summary = result.get('response', '').strip()
                return summary
                
            return "AI √∂zet olu≈üturulamadƒ±."
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è AI √∂zet hatasƒ±: {e}")
            return "AI √∂zet olu≈üturulamadƒ±."

    def find_first_similar_rule(self, input_rule: Dict[str, Any], threshold: float = 0.4) -> Optional[Dict[str, Any]]:
        """ƒ∞lk benzer kuralƒ± bul ve dur (hƒ±zlƒ± ve basit)"""
        
        if not self.collection:
            logger.error("‚ùå MongoDB baƒülantƒ±sƒ± yok!")
            return None
        
        logger.info("üîç ƒ∞lk benzer kural aranƒ±yor (AI ile detection analizi)...")
        
        try:
            # Detection odaklƒ± filtreleme
            rules_cursor = self.collection.find({"detection": {"$exists": True}})
            
            for idx, sigmahq_rule in enumerate(rules_cursor, 1):
                if idx % 50 == 0:
                    logger.info(f"üìä ƒ∞≈ülenen: {idx} kural")
                
                try:
                    # AI ile detection benzerliƒüi hesapla
                    similarity_score = self.calculate_detection_similarity(input_rule, sigmahq_rule)
                    
                    if similarity_score >= threshold:
                        logger.info(f"‚úÖ Benzer kural bulundu: {similarity_score:.1%} detection benzerliƒüi")
                        
                        # AI √∂zeti olu≈ütur
                        ai_summary = self.generate_detection_summary(input_rule, sigmahq_rule, similarity_score)
                        
                        return {
                            'rule': sigmahq_rule,
                            'similarity_score': similarity_score,
                            'rule_id': str(sigmahq_rule.get('_id', '')),
                            'title': sigmahq_rule.get('title', 'No title'),
                            'description': sigmahq_rule.get('description', ''),
                            'tags': sigmahq_rule.get('tags', []),
                            'level': sigmahq_rule.get('level', ''),
                                                     'author': sigmahq_rule.get('author', ''),
                             'date': sigmahq_rule.get('date', ''),
                             'ai_summary': ai_summary
                         }
                    
                    # Rate limiting
                    time.sleep(0.05)
                    
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è Kural {idx} analiz hatasƒ±: {e}")
                    continue
            
            logger.info("‚ùå Benzer kural bulunamadƒ±")
            return None
            
        except Exception as e:
            logger.error(f"‚ùå Arama hatasƒ±: {e}")
            return None

    def display_result(self, input_rule: Dict[str, Any], similar_rule: Optional[Dict[str, Any]]):
        """Basit sonu√ß g√∂sterimi (tek kural i√ßin)"""
        
        print("\n" + "="*60)
        print("üéØ KULLANICI KURALI (Detection Odaklƒ±):")
        print("="*60)
        print(f"üìã Ba≈ülƒ±k: {input_rule.get('title', 'No title')}")
        print(f"üìÑ A√ßƒ±klama: {input_rule.get('description', 'No description')[:80]}...")
        
        if similar_rule:
            print(f"\nüèÜ BENZER SIGMAHQ KURALI BULUNDU:")
            print("="*60)
            print(f"üìã Ba≈ülƒ±k: {similar_rule['title']}")
            print(f"üÜî Rule ID: {similar_rule['rule_id']}")
            print(f"üéØ Detection Benzerliƒüi: {similar_rule['similarity_score']:.1%}")
            print(f"üìÑ A√ßƒ±klama: {similar_rule['description'][:80]}...")
            print(f"üè∑Ô∏è Tags: {similar_rule['tags'][:3]}...")  # ƒ∞lk 3 tag
            print(f"üìä Level: {similar_rule['level']}")
            print(f"üë§ Author: {similar_rule['author']}")
            print(f"üìÖ Date: {similar_rule['date']}")
            print(f"ü§ñ AI Detection Analizi: {similar_rule.get('ai_summary', '√ñzet olu≈üturulamadƒ±')}")
        else:
            print("\n‚ùå BENZER KURAL BULUNAMADI!")
            print("üí° Threshold'u d√º≈ü√ºrmeyi deneyin (√∂rn: 0.3)")
            print("üîç Sistem sadece detection mantƒ±ƒüƒ±na odaklanƒ±yor")

    def close_connection(self):
        """MongoDB baƒülantƒ±sƒ±nƒ± kapat"""
        if self.client:
            self.client.close()
            logger.info("‚úÖ MongoDB baƒülantƒ±sƒ± kapatƒ±ldƒ±")

def main():
    """Ana fonksiyon"""
    
    # Konfig√ºrasyon
    MONGO_CONNECTION = "mongodb+srv://emircandemirci:m#n#m#n1135@cluster0.gntn5zk.mongodb.net/"
    DATABASE_NAME = "sigmaDB"
    COLLECTION_NAME = "rules"
    OLLAMA_URL = "http://localhost:11434"
    MODEL_NAME = "llama3.1"
    
    # Comparator'ƒ± ba≈ülat
    comparator = SigmaHQComparator(MONGO_CONNECTION, OLLAMA_URL, MODEL_NAME)
    
    # Baƒülantƒ±larƒ± test et
    if not comparator.test_ollama_connection():
        print("‚ùå Ollama baƒülantƒ±sƒ± kurulamadƒ±. L√ºtfen 'ollama serve' komutunu √ßalƒ±≈ütƒ±rƒ±n.")
        return
    
    if not comparator.connect_mongodb(DATABASE_NAME, COLLECTION_NAME):
        print("‚ùå MongoDB baƒülantƒ±sƒ± kurulamadƒ±.")
        return
    
    try:
        print("üöÄ SigmaHQ Benzerlik Analizi Ba≈ülatƒ±lƒ±yor...")
        print("="*50)
        
        # Kullanƒ±cƒ± kuralƒ±nƒ± al
        print("\nüì• Sigma kuralƒ±nƒ±zƒ± nasƒ±l vermek istiyorsunuz?")
        print("1. YAML dosyasƒ± yolu")
        print("2. Doƒürudan YAML metni")
        
        choice = input("\nSe√ßiminiz (1/2): ").strip()
        
        input_rule = {}
        
        if choice == "1":
            file_path = input("üìÅ YAML dosyasƒ± yolu: ").strip()
            input_rule = comparator.load_sigma_rule_from_file(file_path)
        elif choice == "2":
            print("üìù YAML metnini yapƒ±≈ütƒ±rƒ±n (Ctrl+D ile bitirin):")
            yaml_lines = []
            try:
                while True:
                    line = input()
                    yaml_lines.append(line)
            except EOFError:
                yaml_text = "\n".join(yaml_lines)
                input_rule = comparator.load_sigma_rule_from_text(yaml_text)
        else:
            print("‚ùå Ge√ßersiz se√ßim!")
            return
        
        if not input_rule:
            print("‚ùå Kural y√ºklenemedi!")
            return
        
        # Detection benzerlik parametresi
        try:
            threshold = float(input("\nüéØ Minimum detection benzerlik e≈üiƒüi (0.0-1.0) [varsayƒ±lan: 0.4]: ") or "0.4")
        except ValueError:
            threshold = 0.4
        
        # Basit detection analizi
        print(f"\nü§ñ AI ile detection odaklƒ± analiz ba≈ülƒ±yor (e≈üik: {threshold:.1f})...")
        similar_rule = comparator.find_first_similar_rule(input_rule, threshold)
        
        # Sonucu g√∂ster
        comparator.display_result(input_rule, similar_rule)
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è ƒ∞≈ülem kullanƒ±cƒ± tarafƒ±ndan durduruldu")
    except Exception as e:
        logger.error(f"‚ùå Ana i≈ülem hatasƒ±: {e}")
    finally:
        comparator.close_connection()

if __name__ == "__main__":
    main()